(function() {
  var Command, Stop,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Command = require('../command');

  Stop = (function(superClass) {
    extend(Stop, superClass);

    function Stop() {
      return Stop.__super__.constructor.apply(this, arguments);
    }

    Stop.prototype.name = 'stop';

    Stop.prototype.aliases = ['exit', 'quit'];

    Stop.prototype.definition = 'Ends the current prompt and continues running the rest of the code.';

    Stop.prototype.execute = function(args, chain) {
      return chain.stop();
    };

    return Stop;

  })(Command);

  module.exports = Stop;

}).call(this);
