(function() {
  var App, AutoComplete, File, Output, SyncPrompt, commands,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SyncPrompt = require('./sync_prompt');

  Output = require('./output/local_output');

  commands = require('./commands');

  AutoComplete = require('./completion');

  File = require('./file');

  App = (function() {
    App.prototype._commands = [];

    function App(scope, isStandAlone) {
      var mode;
      this.scope = scope;
      this.isStandAlone = isStandAlone;
      this.find_file = bind(this.find_file, this);
      this.find_command = bind(this.find_command, this);
      this.output = new Output();
      this.stack = new Error().stack;
      mode = this.isStandAlone ? 'coffee' : this.find_file().type();
      this.prompt = new SyncPrompt({
        typeahead: new AutoComplete(this.scope, this.find_file()).autocomplete,
        mode: mode
      });
      this.prompt.onData = this.find_command;
    }

    App.prototype.commands = function() {
      var _, command;
      if (this._commands.length === 0) {
        for (_ in commands) {
          command = commands[_];
          this._commands.push(new command({
            output: this.output,
            scope: this.scope,
            prompt: this.prompt,
            app: this
          }));
        }
      }
      return this._commands;
    };

    App.prototype.find_command = function(input, chain) {
      var args, command, i, len, match, ref;
      ref = this.commands();
      for (i = 0, len = ref.length; i < len; i++) {
        command = ref[i];
        if (match = command.match(input.trim())) {
          args = String(match[1]).trim().split(' ');
          return command.execute.call(command, args, chain);
        }
      }
      return false;
    };

    App.prototype.open = function() {
      if (!this.isStandAlone) {
        this.prompt.type('whereami');
      }
      return this.prompt.open();
    };

    App.prototype.find_file = function() {
      return this.file || (this.file = (function(_this) {
        return function() {
          var _, file, foundCall, i, item, len, line, ref, ref1;
          foundCall = false;
          ref = _this.stack.split('\n');
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            if (foundCall) {
              ref1 = item.match(/([^ (:]+):(\d+):\d+/), _ = ref1[0], file = ref1[1], line = ref1[2];
              if (file !== '<anonymous>') {
                return new File(file, parseInt(line));
              }
            } else if (item.match(/Pry\.open/)) {
              foundCall = true;
            }
          }
          return new File(__filename, null);
        };
      })(this)());
    };

    return App;

  })();

  module.exports = App;

}).call(this);
