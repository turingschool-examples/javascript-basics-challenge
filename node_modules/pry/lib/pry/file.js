(function() {
  var File, SyncHighlight, fs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  SyncHighlight = require('./sync_highlight');

  File = (function() {
    function File(name, line1) {
      var i, j, l, len, ref, ref1;
      this.name = name;
      this.line = line1 != null ? line1 : 0;
      this._getIndentLevel = bind(this._getIndentLevel, this);
      this.lines = this.content().split("\n");
      if (!((ref = this.lines[this.line]) != null ? ref.match(/pry\.it/) : void 0)) {
        ref1 = this.lines;
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
          l = ref1[i];
          if (l.match(/eval\s*\(?\s*pry\.it/) != null) {
            this.line = i + 1;
            break;
          }
        }
      }
    }

    File.prototype.type = function() {
      if (this.name.match(/coffee$/)) {
        return 'coffee';
      } else {
        return 'js';
      }
    };

    File.prototype.by_lines = function(start, end) {
      if (end == null) {
        end = start;
      }
      return this.lines.slice(start - 1, end).join('\n');
    };

    File.prototype.content = function() {
      return this._content || (this._content = fs.readFileSync(this.name).toString());
    };

    File.prototype.formatted_content_by_line = function(start, end, line) {
      if (end == null) {
        end = start;
      }
      if (line == null) {
        line = this.line;
      }
      start = (start < 0 ? 0 : start);
      return new SyncHighlight(this.content(), this.type()).code_snippet(start, end, line);
    };

    File.prototype._getIndentLevel = function(line) {
      return line.length - line.trimLeft().length;
    };

    File.prototype.getLocalVariables = function() {
      var _, currentIndentLevel, i, indentLevel, j, k, len, line, localVar, match, multiple, ref, ref1, single, vars;
      currentIndentLevel = this._getIndentLevel(this.lines[this.line - 1]);
      vars = [];
      for (i = j = ref = this.line - 2; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
        if (!(i > 0)) {
          continue;
        }
        line = this.lines[i];
        indentLevel = this._getIndentLevel(line);
        if (indentLevel > currentIndentLevel || !line.match(/\S/)) {
          continue;
        }
        currentIndentLevel = indentLevel;
        match = line.match(/^\s*(?:\[|{)((?:\w+|\,|\s)+)(?:\]|})\s*\=|^\s*(\w+)\s*\=/);
        if (match != null) {
          _ = match[0], multiple = match[1], single = match[2];
          if (multiple != null) {
            ref1 = multiple.split(",");
            for (k = 0, len = ref1.length; k < len; k++) {
              localVar = ref1[k];
              vars.push(localVar.trim());
            }
          }
          if (single != null) {
            vars.push(single.trim());
          }
        } else {
          match = line.match(/class (\w+)/);
          if (match != null) {
            vars.push(match[1]);
          }
        }
      }
      return vars;
    };

    return File;

  })();

  module.exports = File;

}).call(this);
