(function() {
  var Compiler, coffee, pry;

  coffee = require('coffeescript');

  pry = require('../pry');

  Compiler = (function() {
    Compiler.prototype.mode_id = 0;

    Compiler.prototype.modes = ['js', 'coffee'];

    function Compiler(arg) {
      var isCoffee;
      this.scope = arg.scope, isCoffee = arg.isCoffee;
      if (isCoffee) {
        this.mode_id = 1;
      }
    }

    Compiler.prototype.mode = function() {
      return this.modes[this.mode_id];
    };

    Compiler.prototype.toggle_mode = function() {
      return this.mode_id = (this.mode_id + 1) % this.modes.length;
    };

    Compiler.prototype.execute = function(code, language) {
      if (language == null) {
        language = this.modes[this.mode_id];
      }
      return this["execute_" + language](code);
    };

    Compiler.prototype.execute_coffee = function(code) {
      var linesOfJs;
      if (code.match(/await/)) {
        code = "do -> " + code;
      }
      linesOfJs = coffee.compile(code, {
        bare: true
      }).split("\n");
      code = linesOfJs.filter(function(l) {
        return l.length > 0 && l.trim().slice(0, 3) !== 'var1';
      }).join("\n");
      code = code.replace(/var (\w+)/g, 'global.$1 = null');
      return this.execute_js(code);
    };

    Compiler.prototype.execute_js = function(code) {
      var e, error, i, len, line, ref, stack;
      try {
        return this.scope(code);
      } catch (error) {
        e = error;
        stack = [];
        ref = e.stack.split("\n");
        for (i = 0, len = ref.length; i < len; i++) {
          line = ref[i];
          if (line.match(/src\/pry/) != null) {
            break;
          }
          stack.push(line);
        }
        e.stack = stack.join("\n");
        throw e;
      }
    };

    return Compiler;

  })();

  module.exports = Compiler;

}).call(this);
